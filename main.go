package main

import (
	"encoding/json"
	"fmt"
	"os"
	"time"
)

type Card struct {
	ID          int
	Title       string
	Description string
	Status      string
	CreatedAt   time.Time
	UpdatedAt   time.Time
}
type List struct {
	ID        int
	Title     string
	Cards     []Card
	CreatedAt time.Time
	UpdatedAt time.Time
}
type Board struct {
	ID        int
	Title     string
	Lists     []List
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (b *Board) RemoveList(listID int) {
	found := false
	for i, list := range b.Lists {
		if list.ID == listID {
			b.Lists = append(b.Lists[:i], b.Lists[i+1:]...)
			found = true
			fmt.Println("–õ–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω‚úÖ", list.Title)
			break
		}
	}
	if !found {
		fmt.Println("–°–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω‚ùå")
	}
}
func (l *List) RemoveCard(cardID int) (Card, bool) {
	for i, card := range l.Cards {
		if card.ID == cardID {
			l.Cards = append(l.Cards[:i], l.Cards[i+1:]...)
			fmt.Println("–ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞", card)
			return card, true
		}
	}
	fmt.Println("–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
	return Card{}, false
}
func (l *List) MoveCard(toList *List, cardID int) {
	moveCard, found := l.RemoveCard(cardID)
	if !found {
		fmt.Println("–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞‚ùå")
		return
	}
	toList.Cards = append(toList.Cards, moveCard)
	fmt.Println("–ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞‚úÖ", moveCard.Title)
}
func saveToFile(boards []Board, filename string) error {
	file, err := os.Create(filename)
	if err != nil {
		return err
	}
	defer file.Close()

	encoder := json.NewEncoder(file)
	encoder.SetIndent("", "  ")
	return encoder.Encode(boards)
}
func loadFromFile(filename string) ([]Board, error) {
	file, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer file.Close()

	var boards []Board
	decoder := json.NewDecoder(file)
	err = decoder.Decode(&boards)
	return boards, err
}
func (card *Card) Edit() {
	var newTitle, newDescription string
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ(–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –º–µ–Ω—è—Ç—å):")
	fmt.Scan(&newTitle)
	if newTitle != "" {
		card.Title = newTitle
	}
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ(–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –º–µ–Ω—è—Ç—å):")
	fmt.Scan(&newDescription)
	if newDescription != "" {
		card.Description = newDescription
	}
	card.UpdatedAt = time.Now()
	fmt.Println("–ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞‚úÖ")
}
func main() {
	var board []Board
	var boardID int
	boardID = 1
	var write int
	var cardID int
	cardID = 1
	for {
		fmt.Println("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
		fmt.Println("1. –°–æ–∑–¥–∞—Ç—å –î–æ—Å–∫—É")
		fmt.Println("2. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ—Å–∫–∏")
		fmt.Println("3. –£–ø—Ä–∞–≤–ª—è—Ç—å –¥–æ—Å–∫–æ–π")
		fmt.Println("4. –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞")
		fmt.Println("5. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª")
		fmt.Println("0. –í—ã—Ö–æ–¥")
		fmt.Print("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
		fmt.Scan(&write)
		if write == 1 {
			var title string
			fmt.Print("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Å–∫–∏:")
			fmt.Scan(&title)
			newBoard := Board{
				ID:        boardID,
				Title:     title,
				Lists:     []List{},
				CreatedAt: time.Now(),
				UpdatedAt: time.Now(),
			}
			boardID++
			board = append(board, newBoard)
			fmt.Println("–¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞‚úÖ")
		}
		if write == 2 {
			if len(board) == 0 {
				fmt.Println("–î–æ—Å–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç—É‚ùå")
			}
			for _, board := range board {
				fmt.Println(board.Title)
			}
		}
		if write == 3 {
			if len(board) == 0 {
				fmt.Println("–î–æ—Å–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç—É‚ùå")
				continue
			}
			for _, b := range board {
				fmt.Println(b.ID, b.Title)
			}
			fmt.Print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ—Å–∫–∏:")
			var IDcheck int
			fmt.Scan(&IDcheck)
			var selectboard *Board
			for i := range board {
				if board[i].ID == IDcheck {
					selectboard = &board[i]
					break
				}
			}
			if selectboard == nil {
				fmt.Println("–î–æ—Å–∫–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞‚ùå")
				continue
			}
			listID := 1
			for {
				fmt.Println("–†–∞–±–æ—Ç–∞ —Å –¥–æ—Å–∫–æ–π:", selectboard.Title)
				fmt.Println("1. –î–æ–±–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫")
				fmt.Println("2. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–∫–∏")
				fmt.Println("3. –£–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫")
				fmt.Println("4. –£–ø—Ä–∞–≤–ª—è—Ç—å —Å–ø–∏—Å–∫–æ–º")
				fmt.Println("5. –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
				fmt.Print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")
				var writeBoard int
				fmt.Scan(&writeBoard)
				if writeBoard == 1 {
					var title string
					fmt.Print("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞: ")
					fmt.Scan(&title)
					newList := List{
						ID:    listID,
						Title: title,
						Cards: []Card{},
					}
					listID++
					selectboard.Lists = append(selectboard.Lists, newList)
					fmt.Println("–õ–∏—Å—Ç —Å–æ–∑–¥–∞–Ω‚úÖ")
				}
				if writeBoard == 2 {
					if len(selectboard.Lists) == 0 {
						fmt.Println("–õ–∏—Å—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç—É‚ùå")
						continue
					}
					for _, l := range selectboard.Lists {
						fmt.Println(l.Title)
					}
				}
				if writeBoard == 3 {
					for _, l := range selectboard.Lists {
						fmt.Println(l.Title, l.ID)
					}
					fmt.Print("–í–≤–µ–¥–∏—Ç–µ ID –ª–∏—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å")
					var DeleteID int
					fmt.Scan(&DeleteID)
					selectboard.RemoveList(DeleteID)
				}
				if writeBoard == 4 {
					if len(selectboard.Lists) == 0 {
						fmt.Println("–°–ø–∏—Å–æ–∫ –æ—Ç—Å—É—Å—Ç–≤—É–µ—Ç‚ùå")
						continue
					}
					for _, l := range selectboard.Lists {
						fmt.Println(l.ID, l.Title)
					}
					fmt.Print("–í–≤–µ–¥–∏—Ç–µ ID —Å–ø–∏—Å–∫–∞")
					var listcheck int
					fmt.Scan(&listcheck)

					var selectlist *List
					for i := range selectboard.Lists {
						if selectboard.Lists[i].ID == listcheck {
							selectlist = &selectboard.Lists[i]
							break
						}
					}
					if selectlist == nil {
						fmt.Println("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID‚ùå")
						break
					}
					for {
						fmt.Println("üìÇ –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º")
						fmt.Println("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ø–∏—Å–æ–∫:", selectlist.Title)
						fmt.Println("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?")
						fmt.Println("1. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏")
						fmt.Println("2. –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É")
						fmt.Println("3. –£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É")
						fmt.Println("4. –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –≤ –¥—Ä—É–≥–æ–π —Å–ø–∏—Å–æ–∫")
						fmt.Println("5. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É")
						fmt.Println("6. –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥–æ—Å–∫–µ")
						fmt.Print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
						var writeCart int
						fmt.Scan(&writeCart)
						if writeCart == 1 {
							if len(selectlist.Cards) == 0 {
								fmt.Println("–ö–∞—Ä—Ç–æ—á–∫–∏ –æ—Ç—Å—É—Å—Ç–≤—É—é—Ç‚ùå")
							} else {
								fmt.Println("–ö–∞—Ä—Ç–æ—á–∫–∏: ")
								for _, card := range selectlist.Cards {
									fmt.Println(card.ID, card.Title)
								}
							}
						}
						if writeCart == 2 {
							var title string
							fmt.Print("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏")
							fmt.Scan(&title)
							newCard := Card{
								ID:        cardID,
								Title:     title,
								Status:    selectlist.Title,
								CreatedAt: time.Now(),
								UpdatedAt: time.Now(),
							}
							cardID++
							selectlist.Cards = append(selectlist.Cards, newCard)
							fmt.Println("–ö–∞—Ä—Ç–æ—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞‚úÖ")
						}
						if writeCart == 3 {
							var deleteCard int
							if len(selectlist.Cards) == 0 {
								fmt.Println("–ö–∞—Ä—Ç–∞ –æ—Ç—Å—É—Å—Ç–≤—É–µ—Ç‚ùå")
							} else {
								for _, card := range selectlist.Cards {
									fmt.Println(card.ID, card.Title)
								}
								fmt.Print("–í–≤–µ–¥–∏—Ç–µ ID –∫–∞—Ä—Ç–æ—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å")
								fmt.Scan(&deleteCard)
								selectlist.RemoveCard(deleteCard)
							}
						}
						if writeCart == 4 {
							if len(selectboard.Lists) < 2 {
								fmt.Println("–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã 2 —Å–ø–∏—Å–∫–∞")
								continue
							}
							if len(selectlist.Cards) <= 0 {
								fmt.Println("–ö–∞—Ä—Ç–æ—á–∫–∏ –æ—Ç—Å—É—Å—Ç–≤—É—é—Ç")
								continue
							}
							var cardID int
							var selectIDlist int
							fmt.Print("–ö–∞—Ä—Ç–æ—á–∫–∏ –≤ —Å–ø–∏—Å–∫–µ: ")
							for _, l := range selectlist.Cards {
								fmt.Println(l.ID, l.Title)
							}
							fmt.Print("–í–≤–µ–¥–∏—Ç–µ ID –∫–∞—Ä—Ç–æ—á–∫–∏: ")
							fmt.Scan(&cardID)
							fmt.Println("–í–µ—Å—å —Å–ø–∏—Å–æ–∫: ")
							for _, l := range selectboard.Lists {
								fmt.Println(l.ID, l.Title)
							}
							fmt.Print("–í–≤–µ–¥–∏—Ç–µ ID —Å–ø–∏—Å–∫–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å: ")
							fmt.Scan(&selectIDlist)

							var toList *List
							for i := range selectboard.Lists {
								if selectboard.Lists[i].ID == selectIDlist {
									toList = &selectboard.Lists[i]
									break
								}
							}
							if toList == nil {
								fmt.Println("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥‚ùå")
								continue
							}
							if toList.ID == selectlist.ID {
								fmt.Println("–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤ —Ç–æ—Ç –∂–µ —Å–ø–∏—Å–æ–∫‚ùå")
								continue
							}
							selectlist.MoveCard(toList, cardID)
						}
						if writeCart == 5 {
							if len(selectlist.Cards) == 0 {

								fmt.Println("–ö–∞—Ä—Ç–∞ –æ—Ç—Å—É—Å—Ç–≤—É–µ—Ç‚ùå")
								continue
							}
							for _, card := range selectlist.Cards {
								fmt.Println(card.ID, card.Title)
							}
							fmt.Print("–í–≤–µ–¥–∏ ID –∫–∞—Ä—Ç–æ—á–∫–∏")
							var cardID int
							fmt.Scan(&cardID)
							var selectCard *Card
							for i := range selectlist.Cards {
								if selectlist.Cards[i].ID == cardID {
									selectCard = &selectlist.Cards[i]
									break
								}
							}
							if selectCard == nil {
								fmt.Println("–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞‚ùå")
							} else {
								selectCard.Edit()
							}
						}
						if writeCart == 6 {
							fmt.Println("–ü–µ—Ä–µ—Ö–æ–¥ –∫ –¥–æ—Å–∫–µüîô")
							break
						}
					}
				}
				if writeBoard == 5 {
					fmt.Println("–ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüîô")
					break
				}
			}
		}
		if write == 4 {
			var filename string
			fmt.Print("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: ")
			fmt.Scan(&filename)
			loadedBoards, err := loadFromFile(filename)
			if err != nil {
				fmt.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ:", err)
			} else {
				board = loadedBoards
				fmt.Println("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
			}
		}

		if write == 5 {
			var filename string
			fmt.Print("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ")
			fmt.Scan(&filename)
			err := saveToFile(board, filename)
			if err != nil {
				fmt.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:", err)
			} else {
				fmt.Println("üíæ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
			}
		}

		if write == 0 {
			fmt.Println("–ï—â—ë —É–≤–∏–¥–∏–º–º—Å—è")
			return
		}
	}
}
